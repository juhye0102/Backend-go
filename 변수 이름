# 변수 이름

- 변수 이름에는 공백을 포함하지 않은 문자, 숫자, 밑줄을 이용할 수 있음.
- 숫자는 첫 글자에 사용할 수 없음.
- 변수 이름에는 알파벳 뿐만 아니라 유니코드 문자도 사용할 수 있음.

```go
var ß float32
// 또한 Go는 변수 이름에 예약어와 키워드를 사용할 수 없음.
```

- Go의 키워드
    - break
    - defalut
    - func
    - interface
    - select
    - case
    - defer
    - go
    - map
    - struct
    - chan
    - else
    - goto
    - package
    - switch
    - const
    - fallthrough
    - if
    - range
    - type
    - continue
    - for
    - import
    - return
    - var
- Go의 예약어
    - append
    - copy
    - int
    - int8
    - int16
    - int32
    - int64
    - nil
    - true
    - bool
    - delete
    - panic
    - uint
    - uint16
    - uint32
    - uint64
    - uintptr
    - byte
    - error
    - print
    - cap
    - false
    - println
    - close
    - float32
    - float64
    - iota
    - real
    - complex
    - complex64
    - complex128
    - len
    - recover
    - imag
    - make
    - rune
    - new
    - string

- 변수 이름의 길이
    - 대부분의 언어는 보통 한 두 단어를 조합하여 변수 이름을 지음.
    - 하지만 Go에서는 변수의 이름을 최대한 될 수 있으면 짧고 간결하게, 함축적으로 짓도록 권장함.
    - 다음을 실제로 fmt 패키지의 FPrintln 함수임.

```go
func Fprintln(w io.Writer, a ...interface{}) (n int, err error) {
p := newPrinter()
p.doPrint(a, true, true)
n, err = w.Write(p.buf)
p.free()

return
}
// 실제로 w, n, p 등과 같이 한 글자로 된 변수 이름을 자주 볼 수 있음.
```

- 권장 표기법
    - 단어 여러 개를 조합해서 이름을 지어야 한다면 밑줄(_)로 연결 X
    - 낙타 표기법(camel casing)으로 지음
    - 또한 내장 함수나 패키지의 이름과 같은 이름의 변수는 피하는 것이 좋음.

```go
var camel_casing string // X
var camelCasing string // O
var CamelCasing string // O
```

- Getter와 Setter

```go
func Connection() *Conn { // GetConnection() 으로 쓰지 않음.

	return conn
}
// 특정 객체를 반환하는 함수나 메서드의 이름은 명사형으로 짓고 Get 접두어를 붙이지 않음.

func SetId(i int) { ... }
// 특정 객체를 변형하거나 설정하는 함수의 이름 앞에는 Set을 붙임.
```
